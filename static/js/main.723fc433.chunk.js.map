{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/NewPostForm/NewPostForm.tsx","components/Navbar/Navbar.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPostDetails","postId","fetch","then","response","ok","Error","json","PostsList","props","changePostId","selectedPostId","posts","className","map","post","title","body","type","classNames","id","onClick","method","Loader","NewCommentForm","addNewComment","useState","setBody","handleAddComment","event","preventDefault","name","placeholder","aria-label","value","onChange","target","handleCommentChange","PostDetails","setPost","isCommentsVisible","setIsCommentVisible","loader","setLoader","useEffect","catch","reject","comments","comment","newComment","headers","JSON","stringify","addComment","NewPostForm","maxId","currentId","setCurrentId","setTitle","handleAddPost","newPost","handleTitleChange","handleBodyChange","Navbar","to","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-current","App","setPosts","selectedPostID","setSelectedPostID","length","Math","max","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.723fc433.chunk.js","sourcesContent":["export const BASE_URL = 'https://bloggy-api.herokuapp.com/';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = ():Promise<Post[]> => {\n  return fetch(`${BASE_URL}posts`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getPostDetails = (postId: number):Promise<Post> => {\n  return fetch(`${BASE_URL}posts/${postId}?_embed=comments`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  return fetch(`${BASE_URL}comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const addPost = (newPost: Post) => {\n  return fetch(`${BASE_URL}posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newPost),\n  });\n};\n\nexport const deletePost = (postId: number) => {\n  return fetch(`${BASE_URL}posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { deletePost } from '../../api/posts';\n\ninterface Props {\n  changePostId: (postId: number) => void;\n  selectedPostId: number;\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    changePostId,\n    selectedPostId,\n    posts,\n  } = props;\n\n  return (\n    <div className=\"container col-10\">\n      <h2>Posts:</h2>\n      {posts.map(post => (\n        <div className=\"card mb-4\" key={post.id}>\n          <div className=\"card-header\">\n            Featured\n          </div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{post.title}</h5>\n            <p className=\"card-text\">{post.body}</p>\n            <button\n              type=\"button\"\n              className={classNames(\n                'me-2',\n                'btn',\n                'btn-primary',\n                { 'btn-info': selectedPostId === post.id },\n              )}\n              onClick={() => {\n                if (selectedPostId === post.id) {\n                  changePostId(0);\n                } else {\n                  changePostId(post.id);\n                }\n              }}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-danger me-2\"\n              onClick={() => deletePost(post.id)}\n            >\n              Delete\n            </button>\n\n          </div>\n        </div>\n\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\n\ninterface Props {\n  postId: number;\n  addNewComment: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addNewComment } = props;\n  const [body, setBody] = useState('');\n\n  const reset = () => {\n    setBody('');\n  };\n\n  const handleCommentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleAddComment = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addNewComment({\n      body,\n      postId,\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"form-control\"\n          aria-label=\"With textarea\"\n          value={body}\n          onChange={(event) => handleCommentChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        value={body}\n        onClick={(event) => handleAddComment(event)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { addComment, getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState({} as Post | null);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response as Post);\n        setLoader(false);\n      })\n      .catch(reject => {\n        setPost(null);\n        throw new Error(reject);\n      });\n  }, [selectedPostId]);\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    addComment(newComment)\n      .then(() => {\n        getPostDetails(selectedPostId);\n        setLoader(true);\n        setLoader(false);\n      });\n  };\n\n  const hideTriggerComments = () => {\n    setIsCommentVisible(!isCommentsVisible);\n  };\n\n  if (loader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Post details:</h2>\n\n      <div className=\"card mb-2\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{post?.title}</h5>\n          <p className=\"card-text\">{post?.body}</p>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n          {isCommentsVisible && (\n            <>\n              {post?.comments?.map(comment => (\n                <li\n                  className=\"list-group-item\"\n                  key={comment.id}\n                >\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n        <div className=\"card-body\">\n          <button\n            type=\"button\"\n            className=\"btn btn-info mb-4\"\n            onClick={() => hideTriggerComments()}\n          >\n            {isCommentsVisible ? 'Hide comments' : 'Show comments'}\n            {/* {`${comments.length} comments`} */}\n          </button>\n        </div>\n      </div>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { addPost } from '../../api/posts';\n\ninterface Props {\n  maxId: number;\n}\n\nexport const NewPostForm: React.FC<Props> = ({ maxId }) => {\n  const [currentId, setCurrentId] = useState(maxId);\n  const [body, setBody] = useState('');\n  const [title, setTitle] = useState('');\n\n  const reset = () => {\n    setCurrentId(currentId + 1);\n    setTitle('');\n    setBody('');\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleAddPost = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addPost({\n      id: currentId + 1,\n      title,\n      body,\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n\n      <div className=\"input-group mb-2\">\n        <input\n          name=\"title\"\n          placeholder=\"Post title\"\n          className=\"form-control\"\n          value={title}\n          onChange={(event) => handleTitleChange(event)}\n        />\n      </div>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type post here\"\n          className=\"form-control\"\n          value={body}\n          onChange={(event) => handleBodyChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        value={body}\n        onClick={(event) => handleAddPost(event)}\n      >\n        Add a post\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar: React.FC = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div className=\"container-fluid\">\n      <NavLink\n        className=\"navbar-brand\"\n        to=\"\"\n      >\n        Logo\n      </NavLink>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarNav\"\n        aria-controls=\"navbarNav\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"nav-link\"\n              aria-current=\"page\"\n              to=\"\"\n            >\n              Home\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"nav-link\"\n              to=\"#\"\n            >\n              Posts\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts } from './api/posts';\nimport { Loader } from './components/Loader';\nimport { NewPostForm } from './components/NewPostForm';\nimport { Navbar } from './components/Navbar';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([] as Post[]);\n  const [selectedPostID, setSelectedPostID] = useState(0);\n  const [loader, setLoader] = useState(false);\n\n  const changePostId = (postId: number) => {\n    setSelectedPostID(postId);\n  };\n\n  useEffect(() => {\n    setLoader(false);\n    getAllPosts()\n      .then(response => {\n        setPosts(response);\n        setLoader(true);\n      });\n  }, []);\n\n  const setMaxId = () => Math.max(...posts.map(post => post.id));\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loader ? (\n            <>\n              {posts.length !== 0\n                ? (\n                  <PostsList\n                    changePostId={changePostId}\n                    selectedPostId={selectedPostID}\n                    posts={posts}\n                  />\n                )\n                : <h2>have any posts yet</h2>}\n            </>\n          )\n            : <Loader />}\n\n        </div>\n\n        {selectedPostID !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostID} />\n          </div>\n        )}\n\n        <NewPostForm maxId={setMaxId()} />\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}