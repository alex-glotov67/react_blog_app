{"version":3,"sources":["api/api.ts","api/posts.ts","components/NewPostForm/NewPostForm.tsx","components/Navbar/Navbar.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/PostsPage/PostsPage.tsx","components/NotFoundPage/NotFoundPage.tsx","components/HomePage/HomePage.tsx","components/UpdatePostForm/UpdatePostForm.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPostDetails","postId","fetch","then","response","ok","Error","json","NewPostForm","maxId","useState","currentId","setCurrentId","body","setBody","title","setTitle","handleAddPost","event","newPost","preventDefault","id","method","headers","JSON","stringify","className","name","placeholder","value","onChange","target","handleTitleChange","handleBodyChange","type","onClick","Navbar","to","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","Loader","NewCommentForm","props","addNewComment","handleAddComment","handleCommentChange","PostDetails","selectedPostId","post","setPost","isCommentsVisible","setIsCommentVisible","loader","setLoader","useEffect","catch","reject","comments","map","comment","length","newComment","addComment","PostsList","changePostId","posts","history","useHistory","classNames","goBack","PostPage","selectedPostID","setSelectedPostID","path","exact","NotFoundPage","HomePage","UpdatePostForm","useParams","handleUpdatePost","updatedPost","updatePost","App","setPosts","Math","max","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b5963bf.chunk.js","sourcesContent":["export const BASE_URL = 'https://bloggy-api.herokuapp.com/';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = ():Promise<Post[]> => {\n  return fetch(`${BASE_URL}posts`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getPostDetails = (postId: number):Promise<Post> => {\n  return fetch(`${BASE_URL}posts/${postId}?_embed=comments`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  return fetch(`${BASE_URL}comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const addPost = (newPost: Post) => {\n  return fetch(`${BASE_URL}posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newPost),\n  });\n};\n\nexport const updatePost = (updatedPost: Partial<Post>, postId: string) => {\n  return fetch(`${BASE_URL}posts/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(updatedPost),\n  });\n};\n\nexport const deletePost = (postId: number) => {\n  return fetch(`${BASE_URL}posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useState } from 'react';\nimport { addPost } from '../../api/posts';\n\ninterface Props {\n  maxId: number;\n}\n\nexport const NewPostForm: React.FC<Props> = ({ maxId }) => {\n  const [currentId, setCurrentId] = useState(maxId);\n  const [body, setBody] = useState('');\n  const [title, setTitle] = useState('');\n\n  const reset = () => {\n    setCurrentId(currentId + 1);\n    setTitle('');\n    setBody('');\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleAddPost = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addPost({\n      id: currentId + 1,\n      title,\n      body,\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n      <h2 className=\"title text-center\">\n        Add your post\n      </h2>\n      <div className=\"input-group mb-2\">\n        <input\n          name=\"title\"\n          placeholder=\"Post title\"\n          className=\"form-control\"\n          value={title}\n          onChange={(event) => handleTitleChange(event)}\n        />\n      </div>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type post here\"\n          className=\"form-control\"\n          value={body}\n          onChange={(event) => handleBodyChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        onClick={(event) => handleAddPost(event)}\n      >\n        Add a post\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar: React.FC = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n    <div className=\"container\">\n      <NavLink\n        className=\"navbar-brand\"\n        to=\"/home\"\n      >\n        Logo\n      </NavLink>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#navbarNav\"\n        aria-controls=\"navbarNav\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"nav-link\"\n              aria-current=\"page\"\n              to=\"/home\"\n            >\n              Home\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"nav-link\"\n              to=\"/posts\"\n            >\n              Posts\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <NavLink\n              className=\"nav-link\"\n              to=\"/add_post\"\n            >\n              Add Post\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\n\ninterface Props {\n  postId: number;\n  addNewComment: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addNewComment } = props;\n  const [body, setBody] = useState('');\n\n  const reset = () => {\n    setBody('');\n  };\n\n  const handleCommentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleAddComment = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addNewComment({\n      body,\n      postId,\n    });\n    reset();\n  };\n\n  return (\n    <form>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"form-control\"\n          aria-label=\"With textarea\"\n          value={body}\n          onChange={(event) => handleCommentChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        value={body}\n        onClick={(event) => handleAddComment(event)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { addComment, getPostDetails } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState({} as Post | null);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response as Post);\n        setLoader(false);\n      })\n      .catch(reject => {\n        setPost(null);\n        throw new Error(reject);\n      });\n  }, [selectedPostId]);\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    addComment(newComment)\n      .then(() => {\n        getPostDetails(selectedPostId);\n        setLoader(true);\n        setLoader(false);\n      });\n  };\n\n  const hideTriggerComments = () => {\n    setIsCommentVisible(!isCommentsVisible);\n  };\n\n  if (loader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Post details:</h2>\n\n      <div className=\"card mb-2\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{post?.title}</h5>\n          <p className=\"card-text\">{post?.body}</p>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n          {isCommentsVisible && (\n            <>\n              {post?.comments?.map(comment => (\n                <li\n                  className=\"list-group-item\"\n                  key={comment.id}\n                >\n                  <p className=\"ps-2\">{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n        <div className=\"card-body\">\n          <button\n            type=\"button\"\n            className=\"btn btn-info mb-4\"\n            onClick={() => hideTriggerComments()}\n          >\n            {isCommentsVisible ? 'Hide ' : 'Show '}\n            {`${post?.comments?.length} comments`}\n          </button>\n        </div>\n      </div>\n\n      <NewCommentForm\n        postId={selectedPostId}\n        addNewComment={addNewComment}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { deletePost } from '../../api/posts';\n// import { UpdatePostForm } from '../UpdatePostForm';\n\ninterface Props {\n  changePostId: (postId: number) => void;\n  selectedPostId: number;\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    changePostId,\n    selectedPostId,\n    posts,\n  } = props;\n\n  const history = useHistory();\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"title text-center\">\n        Posts\n      </h2>\n      {posts.map(post => (\n        <div className=\"card mb-4\" key={post.id}>\n          <div className=\"card-header\">\n            Featured\n          </div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{post.title}</h5>\n            <p className=\"card-text\">{post.body}</p>\n            <NavLink\n              to={`/posts/${post.id}`}\n              className={classNames(\n                'me-2',\n                'btn',\n                'btn-primary',\n                { 'btn-info': selectedPostId === post.id },\n              )}\n              onClick={() => {\n                if (selectedPostId === post.id) {\n                  changePostId(0);\n                  history.goBack();\n                } else {\n                  changePostId(post.id);\n                }\n              }}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </NavLink>\n\n            <NavLink\n              to={`/update_post/${post.id}`}\n              className=\"btn btn-warning me-2\"\n            >\n              Update\n            </NavLink>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-danger me-2\"\n              onClick={() => deletePost(post.id)}\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { PostDetails } from '../PostDetails';\nimport { PostsList } from '../PostsList';\n\ninterface Props {\n  posts: Post[];\n  loader: boolean;\n}\n\nexport const PostPage: React.FC<Props> = (props) => {\n  const { posts, loader } = props;\n  const [selectedPostID, setSelectedPostID] = useState(0);\n\n  const changePostId = (postId: number) => {\n    setSelectedPostID(postId);\n  };\n\n  useEffect(() => {\n\n  }, [posts]);\n\n  return (\n    <div className=\"row align-items-start\">\n      <div className=\"col\">\n        {loader ? (\n          <>\n            {posts.length !== 0\n              ? (\n                <PostsList\n                  changePostId={changePostId}\n                  selectedPostId={selectedPostID}\n                  posts={posts}\n                />\n              )\n              : <h2>have any posts yet</h2>}\n          </>\n        )\n          : <Loader />}\n      </div>\n\n      <Route path=\"/posts/:postId\" exact>\n        {selectedPostID !== 0 && (\n          <div className=\"col-lg-5\">\n            <PostDetails selectedPostId={selectedPostID} />\n          </div>\n        )}\n      </Route>\n\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">\n    Page not found\n  </h1>\n);\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1 className=\"title\">\n    Home Page\n  </h1>\n);\n","import React, { useState } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { updatePost } from '../../api/posts';\n\nexport const UpdatePostForm: React.FC = () => {\n  const [body, setBody] = useState('');\n  const [title, setTitle] = useState('');\n\n  const { postId } = useParams<{postId: string}>() || '';\n\n  const reset = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleUpdatePost = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    updatePost({\n      title,\n      body,\n    }, postId);\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n      <h2 className=\"title text-center\">\n        Add your post\n      </h2>\n      <div className=\"input-group mb-2\">\n        <input\n          name=\"title\"\n          placeholder=\"Post title\"\n          className=\"form-control\"\n          value={title}\n          onChange={(event) => handleTitleChange(event)}\n        />\n      </div>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type post here\"\n          className=\"form-control\"\n          value={body}\n          onChange={(event) => handleBodyChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary me-2\"\n        onClick={(event) => handleUpdatePost(event)}\n      >\n        Update a post\n      </button>\n\n      <NavLink\n        to=\"/posts\"\n        className=\"btn btn-danger\"\n      >\n        Close\n      </NavLink>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.scss';\n\nimport { getAllPosts } from './api/posts';\nimport { NewPostForm } from './components/NewPostForm';\nimport { Navbar } from './components/Navbar';\nimport { PostPage } from './components/PostsPage';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { HomePage } from './components/HomePage';\nimport { UpdatePostForm } from './components/UpdatePostForm';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([] as Post[]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(false);\n    getAllPosts()\n      .then(response => {\n        setPosts(response);\n        setLoader(true);\n      });\n  }, []);\n\n  const setMaxId = () => Math.max(...posts.map(post => post.id));\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n\n        <Route path=\"/posts\">\n          <PostPage posts={posts} loader={loader} />\n        </Route>\n\n        <Route path=\"/add_post\">\n          <NewPostForm maxId={setMaxId()} />\n        </Route>\n\n        <Route\n          path=\"/update_post/:postId\"\n          component={UpdatePostForm}\n        />\n\n        <Redirect path=\"/home\" to=\"/\" />\n\n        <NotFoundPage />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}